---
// CountdownComponent.astro
---

<div class="countdown-container">
    <canvas id="particleCanvas"></canvas>
    <div class="content">
      <h1 class="title">Descubre lo que se viene</h1>
      <div class="countdown" id="countdown">
        <div class="time-unit">
          <span id="days">00</span>
          <label>Días</label>
        </div>
        <div class="time-unit">
          <span id="hours">00</span>
          <label>Horas</label>
        </div>
        <div class="time-unit">
          <span id="minutes">00</span>
          <label>Minutos</label>
        </div>
        <div class="time-unit">
          <span id="seconds">00</span>
          <label>Segundos</label>
        </div>
      </div>
      <div id="loading" class="loading">Sincronizando tiempo...</div>
    </div>
  </div>
  
  <style>
    .countdown-container {
      position: relative;
      width: 100%;
      height: 100vh;
      background: #000;
      overflow: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: 'Ubuntu', sans-serif;
    }
  
    #particleCanvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
    }
  
    .content {
      position: relative;
      z-index: 2;
      text-align: center;
      color: white;
    }
  
    .title {
      font-size: 3rem;
      font-weight: bold;
      margin-bottom: 2rem;
      text-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
      animation: glow 2s ease-in-out infinite alternate;
    }
  
    @keyframes glow {
      from { text-shadow: 0 0 20px rgba(255, 255, 255, 0.3); }
      to { text-shadow: 0 0 30px rgba(255, 255, 255, 0.6); }
    }
  
    .countdown {
      display: flex;
      gap: 2rem;
      justify-content: center;
      flex-wrap: wrap;
    }
  
    .time-unit {
      display: flex;
      flex-direction: column;
      align-items: center;
      background: rgba(255, 255, 255, 0.1);
      padding: 1.5rem;
      border-radius: 10px;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      min-width: 100px;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
  
    .time-unit:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 30px rgba(255, 255, 255, 0.1);
    }
  
    .time-unit span {
      font-size: 2.5rem;
      font-weight: bold;
      color: #fff;
      margin-bottom: 0.5rem;
    }
  
    .time-unit label {
      font-size: 0.9rem;
      color: rgba(255, 255, 255, 0.8);
      text-transform: uppercase;
      letter-spacing: 1px;
    }
  
    .loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: rgba(255, 255, 255, 0.7);
      font-size: 1.2rem;
    }
  
    .hidden {
      display: none;
    }
  
    @media (max-width: 768px) {
      .title {
        font-size: 2rem;
      }
      
      .countdown {
        gap: 1rem;
      }
      
      .time-unit {
        padding: 1rem;
        min-width: 80px;
      }
      
      .time-unit span {
        font-size: 1.8rem;
      }
    }
  </style>
  
  <script>
    class ParticleSystem {
      constructor() {
        this.canvas = document.getElementById('particleCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.particles = [];
        this.mouse = { x: 0, y: 0 };
        
        this.init();
        this.animate();
        this.setupEventListeners();
      }
  
      init() {
        this.resize();
        this.createParticles();
      }
  
      resize() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
      }
  
      createParticles() {
        const particleCount = Math.floor((this.canvas.width * this.canvas.height) / 8000);
        
        for (let i = 0; i < particleCount; i++) {
          this.particles.push({
            x: Math.random() * this.canvas.width,
            y: Math.random() * this.canvas.height,
            vx: (Math.random() - 0.5) * 0.5,
            vy: (Math.random() - 0.5) * 0.5,
            size: Math.random() * 3 + 1,
            alpha: Math.random() * 0.5 + 0.5,
            originalX: 0,
            originalY: 0
          });
        }
  
        this.particles.forEach(particle => {
          particle.originalX = particle.x;
          particle.originalY = particle.y;
        });
      }
  
      setupEventListeners() {
        window.addEventListener('resize', () => this.resize());
        
        this.canvas.addEventListener('mousemove', (e) => {
          this.mouse.x = e.clientX;
          this.mouse.y = e.clientY;
        });
      }
  
      animate() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        this.particles.forEach(particle => {
          // Movimiento natural
          particle.x += particle.vx;
          particle.y += particle.vy;
          
          // Rebote en bordes
          if (particle.x < 0 || particle.x > this.canvas.width) {
            particle.vx *= -1;
          }
          if (particle.y < 0 || particle.y > this.canvas.height) {
            particle.vy *= -1;
          }
          
          // Efecto del ratón
          const dx = this.mouse.x - particle.x;
          const dy = this.mouse.y - particle.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 150) {
            const force = (150 - distance) / 150;
            particle.x -= (dx / distance) * force * 3;
            particle.y -= (dy / distance) * force * 3;
          }
          
          // Volver suavemente a la posición original
          const returnForce = 0.01;
          particle.x += (particle.originalX - particle.x) * returnForce;
          particle.y += (particle.originalY - particle.y) * returnForce;
          
          // Dibujar partícula
          this.ctx.save();
          this.ctx.globalAlpha = particle.alpha;
          this.ctx.fillStyle = '#ffffff';
          this.ctx.beginPath();
          this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
          this.ctx.fill();
          this.ctx.restore();
        });
        
        requestAnimationFrame(() => this.animate());
      }
    }
  
    class CountdownTimer {
      constructor() {
        this.targetDate = new Date('2025-08-30T00:00:00');
        this.elements = {
          days: document.getElementById('days'),
          hours: document.getElementById('hours'),
          minutes: document.getElementById('minutes'),
          seconds: document.getElementById('seconds'),
          loading: document.getElementById('loading'),
          countdown: document.getElementById('countdown')
        };
        
        this.init();
      }
  
      async init() {
        try {
          // Sincronizar con API de tiempo
          const currentTime = await this.getCurrentTime();
          this.startCountdown(currentTime);
        } catch (error) {
          console.warn('Error al sincronizar tiempo, usando tiempo local:', error);
          this.startCountdown(new Date());
        }
      }
  
      async getCurrentTime() {
        const response = await fetch('https://worldtimeapi.org/api/timezone/Europe/Madrid');
        const data = await response.json();
        return new Date(data.datetime);
      }
  
      startCountdown(currentTime) {
        this.elements.loading.classList.add('hidden');
        this.elements.countdown.style.display = 'flex';
        
        const updateTimer = () => {
          const now = new Date();
          const timeDiff = this.targetDate.getTime() - now.getTime();
          
          if (timeDiff <= 0) {
            this.showCompleted();
            return;
          }
          
          const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
          const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
          const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
          const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);
          
          this.elements.days.textContent = days.toString().padStart(2, '0');
          this.elements.hours.textContent = hours.toString().padStart(2, '0');
          this.elements.minutes.textContent = minutes.toString().padStart(2, '0');
          this.elements.seconds.textContent = seconds.toString().padStart(2, '0');
        };
        
        updateTimer();
        setInterval(updateTimer, 1000);
      }
  
      showCompleted() {
        this.elements.countdown.innerHTML = '<div class="completed">¡El momento ha llegado!</div>';
      }
    }
  
    // Inicializar cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', () => {
      new ParticleSystem();
      new CountdownTimer();
    });
  </script>